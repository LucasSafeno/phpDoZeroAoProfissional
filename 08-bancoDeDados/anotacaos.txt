# Criar Banco de dados

CREATE DATABASE  teste321;

# Mostrar bancao de dados

SHOW DATABASES;

# Selecionar / Usar banco dados

USER nameBd;

# Deletar banco de dados

DROP DATABASE nomeBd;

# Criar usuário 
CREATE USER TO 'iser'@'%' IDENFITIED BY 'password';

# PRILEGIOS MYSQL
 GRANT ALL PRIVILEGES ON * . * TO 'user'@'%';
 FLUSH PRIVILEGES; ( Atualizar privilegios)

_______________________________________________________________________________________

######################
## TIPOS DE DADOS	##
######################

int 		= números inteiros - até 11 caracteres
varchar 	= numero e letra
date 		= datas inteiras (ano, mes e dia)
datetime	= ano, mes, dia, hora, minutos e segundos
timestamp 	= representação da data em milisegundos
time 		= armazena horas, minutos e segundos
year 		= ano

_______________________________________________________________________________________

######################
## COMANDO SELECT	##
######################

SELECT *(campos) FROM table(tabela);

_______________________________________________________________________________________

######################
## COMANDO INSERT	##
######################

INSERT INTO table SET campo = "value"; // funciona apenas no MariaDB/MySQL
INSERT INTO table (campos)  VALUES ("exemplo"); // padrão de todos banco de dados SQL

_______________________________________________________________________________________

######################
## COMANDO UPDATE	##
######################

 UPDATE table SET campo = "new_value" WHERE; // nunca esquecer WHERE!!!

_______________________________________________________________________________________


######################
## COMANDO DELETE	##
######################

DELETE FROM table WHERE;

_______________________________________________________________________________________


##########################
## FILTRANDO COM WHERE	##
##########################

WHERE	=	Server para filtrar informações 

SELECT * FROM usuarios WHERE id = '1';

_______________________________________________________________________________________

##########################
## LIKE, BETWENN e IN	##
##########################

LIKE	=	Busca por parte/parecida com /oparametro
	SELECT * FROM usuarios WHERE nome = "Luc"; // não retorna, pois não existe LUC no campo nome
	SELECT * FROM usuarios WHERE nome LIKE 'Luc%'; // Seleciona todos os camps de usuarios one o nome começa com 'LUC'
		apos o % será ignorando
	SELECT * FROM usuarios WHERE nome LIKE '%CA'; // Consulta a procurar pelo nome com final "CA"
	SELECT * FROM usuarios WHERE email LIKE '%@%'; // consulta quando não sabe inicio nem o fim


BETWEEN		=	Usando em numeros e em Datas
	SELECT * FROM usuarios WHERE data_nascimento BETWEEN '2000-01-01' AND '2022-12-01';


IN 			=	Cria uma lista e faz a pesquisa com informações passadas na lista do IN
	SELECT * FROM usuarios WHERE id IN(1,3);

_______________________________________________________________________________________

##########################
## COMANDO HAVING		##
##########################


HAVING = SELECT * FROM usuarios HAVING id = '1';

 HAVING usado quando for utilizar "alias"
 	SELECT * (id+10) as soma FROM usuarios HAVING soma < 15;


_______________________________________________________________________________________

##########################
## ORDER BY e LIMIT		##
##########################

ORDER = ordenar resultados
	SELECT * FROM usuarios ORDER BY data_nascimento DESC;


LIMIT = Limitar resultados
	SELECT * FROM usuarios ORDER BY data_nascimento ASC LIMIT 2;
	SELECT * FROM  usuarios LIMIT 1, 2; // pula o primeiro resultado

_______________________________________________________________________________________


##########################
## GROUP BY				##
##########################
 
 GROUP BY = Agrupamento de informações
 	SELECT COUNT(*) as contagem, faixa_salarial FROM usuarios GROUP BY faixa_salarial;

_______________________________________________________________________________________


##############################################
## RELACIONAMENTO ENTRE TABELAS				##
##############################################

3 Tipos de relacionamento :

	Primeiro 	-	1:N = Relação entre 1 para muitos (tabela categoria. Varios item relacionados a uma categoria)
	Segundo 	-	1:1 = 1 item está relacionado diretamente a outro item (sitema de token)
	Terceiro 	-	N:N = Varios para Varios (1 produtos pode ter varias cores, e uma cor pode ter varios produtos 						  associados)
_______________________________________________________________________________________


##############################################
## CONSULTA AVANÇADAS COM JOIN				##
##############################################


	3 Principais JOIN's : inner join, left join e right join

	INNER JOIN 	= SELECT usuarios.nome, faixas.titulo FROM usuarios  INNER JOIN faixas ON faixas.id = usuarios.faixa_salario; // retorna apenas resultados bem sucessedidos 

	LEFT JOIN = SELECT usuarios.nome, faixas.titulo FROM usuarios  LEFT JOIN faixas ON faixas.id = usuarios.faixa_salarial; //  retorna todos os resultados da tabela da esquerda independente se houver relação ou não

	RIGHT JOIN = SELECT usuarios.nome, faixas.titulo FROM usuarios  LEFT JOIN faixas ON faixas.id = usuarios.faixa_salario ; //prioriza os resultado da tabela da direita, independente da relação

_______________________________________________________________________________________


##############################################
## SUBCONSULTA COM SUBQUERY					##
##############################################

  consulta dentro da consulta 
  	SELECT usuarios.nome, (select faixas.titulo FROM faixas WHERE faixas.id = usuarios.faixa_salarial) as faixa FROM usuarios;

_______________________________________________________________________________________


##############################################
## CRIAR FUNÇÕES							##
##############################################

	CREATE FUNCTION CONTAR(nome VARCHAR(100))
	RETURNS INT(10)
    BEGIN
    	DECLARE qt INT(10);
        SET qt = LENGTH(nome);
        RETURN qt;
    END$$ 

    ----

    SELECT nome, email, CONTAR(nome) as contagem FROM usuarios;

_______________________________________________________________________________________

##############################################
## CRIAR VIEWS								##
##############################################

 VIEW = uma tabela falsa/ virtual

 CREATE VIEW usuariosprimeirafaixa AS 
	SELECT * FROM usuarios WHERE faixa_salarial = '1';
 
_______________________________________________________________________________________